generator client {
  provider   = "prisma-client-js"
  engineType = "binary"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model users {
  id                 Int                  @id @default(autoincrement())
  email              String               @unique
  role               Role                 @default(STUDENT)
  name               String               @db.VarChar(150)
  password           String               @db.VarChar(60)
  active             Boolean              @default(true)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  user_classroom     user_classroom[]
  registration       registration[]
  user_reapplication user_reapplication[]
  activities         activities?          @relation(fields: [activities_fk], references: [id])
  activities_fk      Int?
}

model registration {
  id                     Int      @id @default(autoincrement())
  avatar_url             String?
  birthday               DateTime
  cpf                    String?  @db.VarChar(11)
  sex                    Int      @db.SmallInt
  color_race             Int      @db.SmallInt
  deficiency             Boolean
  deficiency_description String?  @db.Text
  responsable_name       String?  @db.VarChar(90)
  responsable_cpf        String?  @db.VarChar(11)
  responsable_telephone  String?  @db.VarChar(11)
  zone                   Int      @db.SmallInt
  kinship                Kinship? @default(NAO_DEFINIDO)
  kinship_description    String?  @db.Text
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  user_fk                Int
  user                   users    @relation(fields: [user_fk], references: [id])
}

model user_reapplication {
  id               Int            @id @default(autoincrement())
  user_fk          Int?
  reapplication    reapplication? @relation(fields: [reapplication_fk], references: [id])
  reapplication_fk Int?
  users            users?         @relation(fields: [user_fk], references: [id])
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
}

model reapplication {
  id                 Int                  @id @default(autoincrement())
  name               String               @db.VarChar(150)
  active             Boolean              @default(true)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  classrooms         classroom[]
  user_reapplication user_reapplication[]
}

model classroom {
  id                   Int                    @id @default(autoincrement())
  name                 String
  owner_user_fk        Int
  reapplication_fk     Int
  isOpen               Boolean                @default(false)
  active               Boolean                @default(true)
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  classroom_activities classroom_activities[]
  classroom_classes    classroom_classes[]
  classroom_module     classroom_module[]
  user                 user_classroom[]
  reapplication        reapplication?         @relation(fields: [reapplication_fk], references: [id])
}

model module {
  id               Int                @id @default(autoincrement())
  name             String
  description      String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  classes          classes[]
  classroom_module classroom_module[]
}

model classroom_module {
  id           Int        @id @default(autoincrement())
  active       Boolean
  module       module?    @relation(fields: [module_fk], references: [id])
  module_fk    Int?
  classroom    classroom? @relation(fields: [classroom_fk], references: [id])
  classroom_fk Int?
}

model classes {
  id                 Int                 @id @default(autoincrement())
  name               String
  necessary_material String?
  objective          String?
  duration           Float?
  active             Boolean             @default(false)
  classroom_classes  classroom_classes[]
  activities         activities[]
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  module             module?             @relation(fields: [moduleId], references: [id])
  moduleId           Int?
}

model classroom_classes {
  id           Int        @id @default(autoincrement())
  active       Boolean
  classes      classes?   @relation(fields: [classes_fk], references: [id])
  classes_fk   Int?
  classroom    classroom? @relation(fields: [classroom_fk], references: [id])
  classroom_fk Int?
}

model activities {
  id                   Int                    @id @default(autoincrement())
  name                 String
  description          String?                @db.Text
  type_activities      Type_Activities
  points_activities    Int
  difficult            Difficulties
  time_activities      Int
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  classroom_activities classroom_activities[]
  user_activities      user_activities[]
  users                users[]
  classes              classes?               @relation(fields: [classesId], references: [id])
  classesId            Int?
}

model classroom_activities {
  id            Int         @id @default(autoincrement())
  active        Boolean
  activities    activities? @relation(fields: [activities_fk], references: [id])
  activities_fk Int?
  classroom     classroom?  @relation(fields: [classroom_fk], references: [id])
  classroom_fk  Int?
}

model user_activities {
  id                       Int                        @id @default(autoincrement())
  status                   Status_Activities          @default(PENDING)
  createdAt                DateTime                   @default(now())
  updatedAt                DateTime                   @updatedAt
  activities               activities?                @relation(fields: [activities_fk], references: [id])
  activities_fk            Int?
  user_classroom           user_classroom?            @relation(fields: [user_classroomId], references: [id])
  user_classroomId         Int?
  user_activities_archives user_activities_archives[]
}

model user_activities_archives {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  size               Int
  original_name      String           @db.Text()
  archive_url        String?
  user_activities_fk Int
  user_activities    user_activities? @relation(fields: [user_activities_fk], references: [id])
}

model user_classroom {
  id              Int               @id @default(autoincrement())
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  classroom       classroom?        @relation(fields: [classroomId], references: [id])
  classroomId     Int?
  users           users?            @relation(fields: [usersId], references: [id])
  usersId         Int?
  user_activities user_activities[]
}

enum Role {
  ADMIN
  STUDENT
  TEACHER
}

enum Kinship {
  PAI
  MAE
  AVO_A
  TIO_A
  IRMAO_A
  PRIMO_A
  OUTRO
  NAO_PARENTE
  NAO_DEFINIDO
}

enum Difficulties {
  BAIXO
  MEDIO
  ALTO
  MUITO_ALTO
}

enum Type_Activities {
  QUIZ
  CODE
}

enum Status_Activities {
  PENDING
  COMPLETED
}
