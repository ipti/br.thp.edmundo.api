generator client {
  provider   = "prisma-client-js"
  engineType = "binary"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model users {
  id                 Int                  @id @default(autoincrement())
  email              String               @unique
  role               Role                 @default(STUDENT)
  name               String               @db.VarChar(150)
  password           String               @db.VarChar(60)
  active             Boolean              @default(true)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  user_classroom     user_classroom[]
  registration       registration[]
  user_reapplication user_reapplication[]
  activities         activities?          @relation(fields: [activities_fk], references: [id])
  activities_fk      Int?
}

model registration {
  id                     Int      @id @default(autoincrement())
  avatar_url             String?
  birthday               DateTime
  cpf                    String?  @db.VarChar(11)
  sex                    Int      @db.SmallInt
  color_race             Int      @db.SmallInt
  deficiency             Boolean
  deficiency_description String?  @db.Text
  responsable_name       String?  @db.VarChar(90)
  responsable_cpf        String?  @db.VarChar(11)
  responsable_telephone  String?  @db.VarChar(11)
  zone                   Int      @db.SmallInt
  kinship                Kinship? @default(NAO_DEFINIDO)
  kinship_description    String?  @db.Text
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  user_fk                Int
  user                   users    @relation(fields: [user_fk], references: [id])
}

model user_reapplication {
  id               Int            @id @default(autoincrement())
  user_fk          Int?
  reapplication    reapplication? @relation(fields: [reapplication_fk], references: [id])
  reapplication_fk Int?
  users            users?         @relation(fields: [user_fk], references: [id])
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
}

model reapplication {
  id                 Int                  @id @default(autoincrement())
  name               String               @db.VarChar(150)
  active             Boolean              @default(true)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  classrooms         classroom[]
  user_reapplication user_reapplication[]
}

model classroom {
  id                   Int                    @id @default(autoincrement())
  name                 String
  owner_user_fk        Int
  reapplication_fk     Int
  isOpen               Boolean                @default(false)
  active               Boolean                @default(true)
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  classroom_activities classroom_activities[]
  classroom_classes    classroom_classes[]
  classroom_module     classroom_module[]
  user                 user_classroom[]
  reapplication        reapplication?         @relation(fields: [reapplication_fk], references: [id])
}

model module {
  id               Int                @id @default(autoincrement())
  name             String
  description      String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  classes          classes[]
  classroom_module classroom_module[]
}

model classroom_module {
  id           Int        @id @default(autoincrement())
  active       Boolean
  module       module?    @relation(fields: [module_fk], references: [id])
  module_fk    Int?
  classroom    classroom? @relation(fields: [classroom_fk], references: [id])
  classroom_fk Int?
  createdAt    DateTime   @default(now())
}

model classes {
  id                 Int                 @id @default(autoincrement())
  name               String
  necessary_material String?
  objective          String?
  duration           Float?
  active             Boolean             @default(false)
  classroom_classes  classroom_classes[]
  activities         activities[]
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  module             module?             @relation(fields: [moduleId], references: [id])
  moduleId           Int?
}

model classroom_classes {
  id           Int        @id @default(autoincrement())
  active       Boolean
  classes      classes?   @relation(fields: [classes_fk], references: [id])
  classes_fk   Int?
  classroom    classroom? @relation(fields: [classroom_fk], references: [id])
  classroom_fk Int?
  createdAt    DateTime   @default(now())
}

model activities {
  id                   Int                    @id @default(autoincrement())
  name                 String
  description          String?                @db.Text
  expected_return      String?
  type_activities      Type_Activities
  points_activities    Int
  difficult            Difficulties
  time_activities      Int
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  classroom_activities classroom_activities[]
  user_activities      user_activities[]
  users                users[]
  classes              classes?               @relation(fields: [classesId], references: [id])
  classesId            Int?
  form                 form?
}

model form {
  id           Int        @id @default(autoincrement())
  activities   activities @relation(fields: [activitiesId], references: [id])
  activitiesId Int        @unique
  question     question[]
  createdAt    DateTime   @default(now())
}

model question {
  id                   Int                    @id @default(autoincrement())
  content              String                 @db.Text
  type                 Type_Question
  response_question    response_question[]
  form                 form                   @relation(fields: [formId], references: [id])
  formId               Int
  options              options[]
  user_activities_form user_activities_form[]
  createdAt            DateTime               @default(now())
}

model response_question {
  id          Int       @id @default(autoincrement())
  options     options   @relation(fields: [option_fk], references: [id])
  option_fk   Int       @unique
  question    question? @relation(fields: [question_fk], references: [id])
  question_fk Int?
  createdAt   DateTime  @default(now())
}

model options {
  id                   Int                    @id @default(autoincrement())
  content              String                 @db.Text
  value                Int?
  user_activities_form user_activities_form[]
  question             question?              @relation(fields: [questionId], references: [id])
  questionId           Int?
  response_question    response_question?
  createdAt            DateTime               @default(now())
}

model user_activities_form {
  id                Int            @id @default(autoincrement())
  user_classroom    user_classroom @relation(fields: [user_classroom_fk], references: [id])
  user_classroom_fk Int
  options           options        @relation(fields: [options_fk], references: [id])
  options_fk        Int
  question          question       @relation(fields: [question_fk], references: [id])
  question_fk       Int
  createdAt         DateTime       @default(now())
}

model classroom_activities {
  id                   Int                   @id @default(autoincrement())
  active               Boolean
  activities           activities?           @relation(fields: [activities_fk], references: [id])
  activities_fk        Int?
  classroom            classroom?            @relation(fields: [classroom_fk], references: [id])
  classroom_fk         Int?
  createdAt            DateTime              @default(now())
  classroom_avaliation classroom_avaliation?
}

model classroom_avaliation {
  id                                       Int                  @id @default(autoincrement())
  createdAt                                DateTime             @default(now())
  updatedAt                                DateTime             @updatedAt
  classroom_activities_fk                  Int                  @unique
  classroom_activities                     classroom_activities @relation(fields: [classroom_activities_fk], references: [id])
  complete_the_activity_correctly          Boolean?
  content_organization                     Boolean?
  completion_within_the_indicated_deadline Boolean?
  creativity_in_the_response               Boolean?
  collaboration                            Boolean?
  understanding_the_content                Boolean?
}

model user_activities {
  id                       Int                        @id @default(autoincrement())
  status                   Status_Activities          @default(PENDING)
  createdAt                DateTime                   @default(now())
  updatedAt                DateTime                   @updatedAt
  activities               activities?                @relation(fields: [activities_fk], references: [id])
  activities_fk            Int?
  user_classroom           user_classroom?            @relation(fields: [user_classroomId], references: [id])
  user_classroomId         Int?
  user_activities_archives user_activities_archives[]
  user_avaliation          user_avaliation?
}

model user_avaliation {
  id                                       Int             @id @default(autoincrement())
  createdAt                                DateTime        @default(now())
  updatedAt                                DateTime        @updatedAt
  user_activities_fk                       Int             @unique
  user_activities                          user_activities @relation(fields: [user_activities_fk], references: [id])
  complete_the_activity_correctly          Float?
  content_organization                     Float?
  completion_within_the_indicated_deadline Float?
  creativity_in_the_response               Float?
  collaboration                            Float?
  understanding_the_content                Float?
  total                                    Float?
}

model user_activities_archives {
  id                 Int              @id @default(autoincrement())
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  size               Int
  original_name      String           @db.Text()
  archive_url        String?
  user_activities_fk Int
  user_activities    user_activities? @relation(fields: [user_activities_fk], references: [id])
}

model user_classroom {
  id                   Int                    @id @default(autoincrement())
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  classroom            classroom?             @relation(fields: [classroomId], references: [id])
  classroomId          Int?
  users                users?                 @relation(fields: [usersId], references: [id])
  usersId              Int?
  user_activities      user_activities[]
  user_activities_form user_activities_form[]
}

enum Role {
  ADMIN
  STUDENT
  TEACHER
}

enum Kinship {
  PAI
  MAE
  AVO_A
  TIO_A
  IRMAO_A
  PRIMO_A
  OUTRO
  NAO_PARENTE
  NAO_DEFINIDO
}

enum Difficulties {
  BAIXO
  MEDIO
  ALTO
  MUITO_ALTO
}

enum Type_Activities {
  QUIZ
  CODE
}

enum Type_Question {
  MULTIPLE_CHOICE
  SELECTION_BOX
}

enum Status_Activities {
  PENDING
  COMPLETED
}
