generator client {
  provider   = "prisma-client-js"
  engineType = "binary"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model users {
  id                 Int                  @id @default(autoincrement())
  email              String               @unique
  role               Role                 @default(STUDENT)
  name               String               @db.VarChar(150)
  password           String               @db.VarChar(60)
  active             Boolean              @default(true)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  user_classroom     user_classroom[]
  user_activities    user_activities[]
  registration       registration[]
  user_reapplication user_reapplication[]
  activities         activities?          @relation(fields: [activitiesId], references: [id])
  activitiesId       Int?
}

model registration {
  id                     Int      @id @default(autoincrement())
  avatar_url             String?
  birthday               DateTime
  cpf                    String?  @db.VarChar(11)
  sex                    Int      @db.SmallInt
  color_race             Int      @db.SmallInt
  deficiency             Boolean
  deficiency_description String?  @db.Text
  responsable_name       String?  @db.VarChar(90)
  responsable_cpf        String?  @db.VarChar(11)
  responsable_telephone  String?  @db.VarChar(11)
  zone                   Int      @db.SmallInt
  kinship                Kinship? @default(NAO_DEFINIDO)
  kinship_description    String?  @db.Text
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  user_fk                Int
  user                   users    @relation(fields: [user_fk], references: [id])
}

model user_reapplication {
  id               Int            @id @default(autoincrement())
  user_fk          Int?
  reapplication    reapplication? @relation(fields: [reapplication_fk], references: [id])
  reapplication_fk Int?
  users            users?         @relation(fields: [user_fk], references: [id])
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
}

model reapplication {
  id                 Int                  @id @default(autoincrement())
  name               String               @db.VarChar(150)
  active             Boolean              @default(true)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  classrooms         classroom[]
  user_reapplication user_reapplication[]
}

model classroom {
  id               Int              @id @default(autoincrement())
  name             String
  owner_user_fk    Int
  reapplication_fk Int
  isOpen           Boolean          @default(false)
  active           Boolean          @default(true)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  user             user_classroom[]
  reapplication    reapplication?   @relation(fields: [reapplication_fk], references: [id])
}

model classes {
  id           Int      @id @default(autoincrement())
  name         String
  classes_date DateTime @db.Date
  active       Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model activities {
  id                Int               @id @default(autoincrement())
  name              String
  description       String?
  type_activities   Type_Activities
  points_activities Int
  difficult         Difficulties
  time_activities   Int
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  user_activities   user_activities[]
  users             users[]
}

model user_activities {
  id           Int               @id @default(autoincrement())
  status       Status_Activities @default(PENDING)
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  users        users?            @relation(fields: [usersId], references: [id])
  usersId      Int?
  activities   activities?       @relation(fields: [activitiesId], references: [id])
  activitiesId Int?
}

model user_classroom {
  id Int @id @default(autoincrement())

  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  classroom   classroom? @relation(fields: [classroomId], references: [id])
  classroomId Int?
  users       users?     @relation(fields: [usersId], references: [id])
  usersId     Int?
}

enum Role {
  ADMIN
  STUDENT
  TEACHER
}

enum Kinship {
  PAI
  MAE
  AVO_A
  TIO_A
  IRMAO_A
  PRIMO_A
  OUTRO
  NAO_PARENTE
  NAO_DEFINIDO
}

enum Difficulties {
  BAIXO
  MEDIO
  ALTO
  MUITO_ALTO
}

enum Type_Activities {
  QUIZ
  CODE
}

enum Status_Activities {
  PENDING
  COMPLETED
}
